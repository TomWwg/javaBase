像其他语言一样，Java可以使用修饰符来修饰类中方法和属性。主要有两类修饰符：
1.访问控制修饰符：
    default（即缺省，什么都不写）：在同一包内可见，不使用任何修饰符。使用对象：类、接口、变量、方法。
    public：对所有类可见。使用对象：类、接口、变量、方法。
    protected：对同一包内的类和所有子类可见。使用对象：变量、方法。    注意：不能修饰类（外部类）
    private：同一类内可见。使用对象：变量、方法。                      注意：不能修饰类（外部类）
2.非访问控制修饰符：
    static修饰符
        静态变量：
            static关键字用来声明独立于对象的静态变量，无论一个类实例化多少对象，它的静态变量只有一份拷贝。静态变量也被称为类变量。局部变量不能声明为静态变量。
        静态方法：
            static关键字用来声明独立于对象的静态方法，静态方法不能使用类的非静态变量。静态方法从参数列表得到数据，然后计算这些数据。
        对类变量和方法的访问可以直接使用classname.variablename和classname.methodname的方式访问
    final修饰符：
        final变量：
            final变量能被显式地初始化并且只能初始化一次。被声明为final的对象的引用不能指向不同的对象。但是final对象里的数据可以被改变。也就是说final对象的引用不能变，但是里面的值可以改变。
            final修饰符通常和static修饰符一起使用来创建类常量。
        final方法：
            类中的final方法可以被子类继承，但是不能被子类修改。（声明final方法的主要目的是防止该方法的内容被修改）
        final类：
            final类不能被继承，没有类能够继承final类的任何特性。
    abstract修饰符：
        抽象类：
            抽象类不能用来实例化对象，声明抽象类型的唯一目的是为了将来对该类进行扩充。
            一个类不能同时被abstract和final修饰。如果一个类包含抽象方法，name该类一定要声明为抽象类，否则将出现编译错误。抽象类可以包含抽象方法和非抽象方法。
        抽象方法：
            抽象方法是一种没有任何实现的方法，该方法的具体实现由子类提供。
            抽象方法不能被声明成final和static。
            任何继承抽象类的子类必须实现父类的所有抽象方法，除非该子类也是抽象类。
            如果一个类包含多干个抽象方法，那么该类必须声明为抽象类。抽象类可以不包含抽象方法。
            抽象方法的声明以分号结尾，例如：public abstract sample();。
    synchronized修饰符：
        synchronized关键字声明的方法同一时间只能被一个线程访问。synchronized修饰符可以应用于四个访问修饰符。
    transient修饰符：
        序列化的对象包含被transient修饰的实例变量时，java虚拟机（JVM）跳过该特定的变量。
        该修饰符包含在定义变量的语句中，用来预处理类和变量的数据类型。
    volatile修饰符：
        volatile修饰的成员变量在每次被线程访问时，都强制从共享内存中重新读取该成员变量的值。而且，当成员变量发生变化时，会强制线程将变化值回写到共享内存。这样在任何时刻，两个不同的线程总是看到某个成员变量的同一个值。
        一个volatile对象引用可能是null。
